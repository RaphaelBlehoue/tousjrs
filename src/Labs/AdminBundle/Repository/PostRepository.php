<?php

namespace Labs\AdminBundle\Repository;

use Labs\AdminBundle\Entity\Post;
use Labs\AdminBundle\Entity\Users;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param Users $user
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getDraftUser(Users $user)
    {
        $qb = $this->createQueryBuilder('p');
        $qb->where(
            $qb->expr()->eq('p.user', ':user'),
            $qb->expr()->eq('p.draft', 0)
        );
        $qb->setParameter('user', $user);
        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * @return array
     */
    public function getAll()
    {
        $qb = $this->createQueryBuilder('p');
        $qb->where('p.draft <> 0');
        $qb->orderBy('p.created', 'Desc');
        return $qb->getQuery()->getResult();
    }

    /**
     * @param Users $user
     * @param Post $post
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     * Recupere l'article de l'utilisateur couramment connecté avec l'id passé en paramètre
     */
    public function getPostForUser(Users $user, Post $post)
    {
        $qb = $this->createQueryBuilder('p');
        $qb->leftJoin('p.user', 'u');
        $qb->addSelect('u');
        $qb->where(
            $qb->expr()->eq('p.id', ':post'),
            $qb->expr()->eq('u.id', ':user')
        );
        $qb->setParameter('post', $post);
        $qb->setParameter('user', $user);
        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * @param Post $post
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     * Recupere l'article avec l'id passé en paramètre
     */
    public function getArticles(Post $post)
    {
        $qb = $this->createQueryBuilder('p');
        $qb->where(
            $qb->expr()->eq('p.id', ':post')
        );
        $qb->setParameter('post', $post);
        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * @param $max
     * @return array
     */
    public function findArticleNum($max)
    {
        $qb = $this->createQueryBuilder('p');
        $qb->leftJoin('p.medias', 'm');
        $qb->addSelect('m');
        $qb->leftJoin('p.item', 'i');
        $qb->addSelect('i');
        $qb->where($qb->expr()->eq('p.online', 1));
        $qb->andWhere($qb->expr()->eq('m.actived', 1));
        $qb->orderBy('p.created', 'Desc');
        $qb->setMaxResults($max);
        return $qb->getQuery()->getResult();
    }
    
    public function findPostItemBySection($options = array(), $max = 9)
    {
        $qb = $this->createQueryBuilder('p');
        $qb->leftJoin('p.medias', 'm');
        $qb->addSelect('m');
        $qb->leftJoin('p.item', 'i');
        $qb->addSelect('i');
        $qb->leftJoin('i.section', 's');
        $qb->addSelect('s');
        $qb->where(
            $qb->expr()->eq('p.online', 1),
            $qb->expr()->eq('m.actived', 1),
            $qb->expr()->eq('s.id', ':options')
        );
        $qb->orderBy('p.created', 'Desc');
        $qb->setMaxResults($max);
        $qb->setParameter('options', $options);
        return $qb->getQuery()->getResult();
    }
    
    
}
